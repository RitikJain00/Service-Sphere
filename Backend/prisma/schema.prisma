generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  password          String
  createdAt         DateTime            @default(now())
  resetOtp          String              @default("")
  verifyOtp         String              @default("")
  isEmailVerified   Boolean             @default(false)
  isPhoneVerified   Boolean             @default(false)
  resetOtpExpireAt  DateTime            @default(now())
  verifyOtpExpireAt DateTime            @default(now())
  resetOtpVerified  Boolean             @default(false)
  Cart              Cart?
  profile           CustomerProfile?
  Favorite          Favorite?
  orders            Orders[]
  PastBookings      PastBookings[]
  pastOrders        PastOrders[]
  UpcommingBookings UpcommingBookings[]
  upcommingOrders   UpcommingOrders[]
  wallet            customerWallet?
}

model customerWallet {
  id         Int      @id @default(autoincrement())
  customerId Int      @unique
  Total      Int      @default(0)
  Pending    Int      @default(0)
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Cart {
  id         Int        @id @default(autoincrement())
  customerId Int        @unique
  total      Int        @default(0)
  discount   Int        @default(0)
  gst        Int        @default(0)
  customer   Customer   @relation(fields: [customerId], references: [id])
  services   Services[] @relation("CartServicesRelation")
}

model Favorite {
  id         Int        @id @default(autoincrement())
  customerId Int        @unique
  customer   Customer   @relation(fields: [customerId], references: [id])
  services   Services[] @relation("FavoriteServicesRelation")
}

model Professional {
  id                Int                  @id @default(autoincrement())
  username          String               @unique
  password          String
  createdAt         DateTime             @default(now())
  resetOtp          String               @default("")
  verifyOtp         String               @default("")
  isEmailVerified   Boolean              @default(false)
  isPhoneVerified   Boolean              @default(false)
  resetOtpExpireAt  DateTime             @default(now())
  verifyOtpExpireAt DateTime             @default(now())
  resetOtpVerified  Boolean              @default(false)
  PastBookings      PastBookings[]
  profile           ProfessionalProfile?
  wallet            ProfessionalWallet?
  services          Services[]
  UpcommingBookings UpcommingBookings[]
}

model CustomerProfile {
  id          Int      @id @default(autoincrement())
  name        String   @default("")
  description String?  @default("")
  image       String?  @default("")
  phone       String?  @default("")
  address     String?  @default("")
  city        String?  @default("")
  pincode     String?  @default("")
  country     String?  @default("")
  customerId  Int      @unique
  customer    Customer @relation(fields: [customerId], references: [id])
}

model ProfessionalProfile {
  id             Int          @id @default(autoincrement())
  name           String       @default("")
  description    String?      @default("")
  image          String?      @default("")
  address        String?      @default("")
  city           String?      @default("")
  pincode        String?      @default("")
  country        String?      @default("")
  professionalId Int          @unique
  phone          String?      @default("")
  professional   Professional @relation(fields: [professionalId], references: [id])
}

model UpcommingOrders {
  id         Int               @id @default(autoincrement())
  date       String
  customerId Int
  payment    String
  amount     Float
  serviceId  Int
  bookingId  Int               @unique
  booking    UpcommingBookings @relation(fields: [bookingId], references: [id])
  customer   Customer          @relation(fields: [customerId], references: [id])
  service    Services          @relation(fields: [serviceId], references: [id])
}

model PastOrders {
  id             Int      @id @default(autoincrement())
  slotDate       String
  completionDate String
  amount         Float
  payment        String
  status         String
  customerId     Int
  serviceId      Int
  customer       Customer @relation(fields: [customerId], references: [id])
  service        Services @relation(fields: [serviceId], references: [id])
}

model Orders {
  id         Int            @id @default(autoincrement())
  total      Int
  gst        Float
  discount   Float
  grandTotal Float
  payment    String
  bookedDate String
  customerId Int
  services   OrderService[]
  customer   Customer       @relation(fields: [customerId], references: [id])
}

model OrderService {
  id        Int      @id @default(autoincrement())
  orderId   Int
  date      String
  serviceId Int
  order     Orders   @relation(fields: [orderId], references: [id])
  service   Services @relation(fields: [serviceId], references: [id])
}

model UpcommingBookings {
  id             Int              @id @default(autoincrement())
  date           String
  professionalId Int
  amount         Float
  payment        String
  customerId     Int
  serviceId      Int
  customer       Customer         @relation(fields: [customerId], references: [id])
  professional   Professional     @relation(fields: [professionalId], references: [id])
  service        Services         @relation(fields: [serviceId], references: [id])
  booking        UpcommingOrders?
}

model PastBookings {
  id             Int          @id @default(autoincrement())
  professionalId Int
  customerId     Int
  serviceId      Int
  amount         Float
  payment        String
  status         String
  completionDate String
  slotdate       String
  customer       Customer     @relation(fields: [customerId], references: [id])
  professional   Professional @relation(fields: [professionalId], references: [id])
  service        Services     @relation(fields: [serviceId], references: [id])
}

model Services {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  time              String
  professionalId    Int
  company           String
  location          String
  rating            Float?
  category          String
  price             Int
  expireince        String
  image             String?
  isActive          String              @default("Active")
  booking           Int                 @default(0)
  orderService      OrderService[]
  pastBookings      PastBookings[]
  PastOrders        PastOrders[]
  professional      Professional        @relation(fields: [professionalId], references: [id])
  upcommingBookings UpcommingBookings[]
  upcommingOrders   UpcommingOrders[]
  carts             Cart[]              @relation("CartServicesRelation")
  favorites         Favorite[]          @relation("FavoriteServicesRelation")
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  wallet   Int    @default(0)
  name     String
  totalGst Int    @default(0)
  pay      Int    @default(0)
  recieve  Int    @default(0)
}

model ProfessionalWallet {
  id             Int          @id @default(autoincrement())
  Total          Int          @default(0)
  Pending        Int          @default(0)
  professionalId Int          @unique
  Pay            Int          @default(0)
  Gst            Int          @default(0)
  professional   Professional @relation(fields: [professionalId], references: [id])
}

model ContactUs {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  message String
  date    DateTime @default(now())
}
