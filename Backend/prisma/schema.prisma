// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  password        String
  profile         CustomerProfile? // One-to-One Relationship
  wallet          Wallet?
  upcommingOrders UpcommingOrders[]
  pastOrders      PastOrders[]
  orders          Orders[]

  Cart              Cart?
  Favorite          Favorite?
  UpcommingBookings UpcommingBookings[]
  PastBookings      PastBookings[]
}

model Wallet {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique
  Total      Int      @default(0)
}

model Cart {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique

  services Services[] @relation("CartServicesRelation")
  total    Int        @default(0)
  gst      Int        @default(0)
  discount Int        @default(0)
}

model Favorite {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique

  services Services[] @relation("FavoriteServicesRelation")
}

model Professional {
  id                Int                  @id @default(autoincrement())
  username          String               @unique
  password          String
  profile           ProfessionalProfile? // One-to-One Relationship
  services          Services[]
  UpcommingBookings UpcommingBookings[]
  PastBookings      PastBookings[]
}

model CustomerProfile {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  image       String?
  phone       String?
  address     String?
  city        String?
  pincode     String?
  country     String?

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique
}

model ProfessionalProfile {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  image       String?
  phone       String?
  address     String?
  city        String?
  pincode     String?
  country     String?

  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int          @unique
}

model UpcommingOrders {
  id      Int    @id @default(autoincrement())
  date    String
  amount  Float
  payment String

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  service   Services @relation(fields: [serviceId], references: [id])
  serviceId Int

  booking   UpcommingBookings @relation(fields: [bookingId], references: [id])
  bookingId Int               @unique
}

model PastOrders {
  id             Int    @id @default(autoincrement())
  slotDate       String
  completionDate String
  amount         Float
  payment        String
  status         String

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  service   Services @relation(fields: [serviceId], references: [id])
  serviceId Int
}

model Orders {
  id         Int    @id @default(autoincrement())
  total      Int
  gst        Float
  discount   Float
  grandTotal Float
  payment    String
  bookedDate String // When the order was placed

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  services OrderService[] // Stores all services related to this order
}

model OrderService {
  id      Int    @id @default(autoincrement())
  order   Orders @relation(fields: [orderId], references: [id])
  orderId Int
  date    String // Booking date of this service

  service   Services @relation(fields: [serviceId], references: [id])
  serviceId Int
}

model UpcommingBookings {
  id             Int          @id @default(autoincrement())
  amount         Float
  payment        String
  date           String
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  service    Services @relation(fields: [serviceId], references: [id])
  serviceId  Int

  booking UpcommingOrders?
}

model PastBookings {
  id             Int    @id @default(autoincrement())
  amount         Float
  slotdate       String
  completionDate String
  payment        String
  status         String

  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
  service        Services     @relation(fields: [serviceId], references: [id])
  serviceId      Int
  customer       Customer     @relation(fields: [customerId], references: [id])
  customerId     Int
}

model Services {
  id          Int     @id @default(autoincrement())
  name        String
  image       String?
  company     String
  description String
  category    String
  expireince  String
  location    String
  rating      Float?
  booking     String?
  price       Int
  time        String
  isActive    String  @default("Active")

  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId Int

  upcommingOrders   UpcommingOrders[]
  orderService      OrderService[]
  upcommingBookings UpcommingBookings[]
  pastBookings      PastBookings[]

  carts      Cart[]       @relation("CartServicesRelation")
  favorites  Favorite[]   @relation("FavoriteServicesRelation")
  PastOrders PastOrders[]
}
